import { NextResponse } from "next/server";
const PUBLIC_BASE = process.env.NEXT_PUBLIC_ADMIN_BASE_PATH || "/panel";
const PROTECTED_PREFIXES = [PUBLIC_BASE, "/api/admin"];
const BLOCK_OLD_PREFIX = "/admin";

function pathStartsWith(pathname, base){return pathname===base||pathname.startsWith(base+"/");}
function parseAllowlist(){return (process.env.ADMIN_ALLOWLIST||"").split(",").map(s=>s.trim()).filter(Boolean);}
// Decodifica Basic â†’ bytes "user:pass" (Edge-compatible)
function basicHeaderToBytes(h){if(!h||!h.startsWith("Basic "))return null;try{const b64=h.slice(6),bin=atob(b64),bytes=new Uint8Array(bin.length);for(let i=0;i<bin.length;i++)bytes[i]=bin.charCodeAt(i);return bytes;}catch{return null;}}
function toHex(ab){const a=new Uint8Array(ab);let o="";for(let i=0;i<a.length;i++)o+=a[i].toString(16).padStart(2,"0");return o;}
function constantTimeEqual(a,b){if(a.length!==b.length)return false;let o=0;for(let i=0;i<a.length;i++)o|=a.charCodeAt(i)^b.charCodeAt(i);return o===0;}
async function basicAuthOk(req){
  const want=(process.env.ADMIN_BASIC_SHA256||"").toLowerCase(); if(!want) return false;
  const bytes=basicHeaderToBytes(req.headers.get("authorization")||""); if(!bytes) return false;
  const dig=await crypto.subtle.digest("SHA-256", bytes.buffer);
  const got=toHex(dig).toLowerCase();
  return constantTimeEqual(got,want);
}
function ipAllowed(req){
  const allow=parseAllowlist(); if(!allow.length) return true;
  const ip=req.headers.get("cf-connecting-ip")||(req.headers.get("x-forwarded-for")||"").split(",")[0].trim()||req.ip||"";
  return allow.includes(ip);
}
// (opcional) Upstash rate-limit
async function rateLimitOk(req){
  const url=process.env.UPSTASH_REDIS_REST_URL, token=process.env.UPSTASH_REDIS_REST_TOKEN;
  if(!url||!token) return true;
  const ip=req.headers.get("cf-connecting-ip")||(req.headers.get("x-forwarded-for")||"").split(",")[0].trim()||req.ip||"unknown";
  const key=`rl:${ip}:${new URL(req.url).pathname}`;
  const body=[["INCR",key],["EXPIRE",key,60],["GET",key]];
  const res=await fetch(`${url}/pipeline`,{method:"POST",headers:{Authorization:`Bearer ${token}`,"Content-Type":"application/json"},body:JSON.stringify(body)});
  if(!res.ok) return true; const data=await res.json(); const current=parseInt(data?.[2]?.[1]||"0",10); return current<=20;
}
export async function middleware(req){
  const { pathname } = new URL(req.url);
  if (pathStartsWith(pathname, BLOCK_OLD_PREFIX)) return new NextResponse("Not Found", { status: 404 });
  const protectedPath = PROTECTED_PREFIXES.some(px=>pathStartsWith(pathname,px));
  if (!protectedPath) return NextResponse.next();
  if (!ipAllowed(req)) return new NextResponse("Forbidden", { status: 403 });
  if (!(await rateLimitOk(req))) return new NextResponse("Too Many Requests", { status: 429 });
  if (!(await basicAuthOk(req))) return new NextResponse("Auth required", { status: 401, headers: { "WWW-Authenticate": `Basic realm="${process.env.ADMIN_BASIC_REALM||"Restricted"}"` }});
  const res = NextResponse.next(); res.headers.set("X-Robots-Tag","noindex, nofollow, noarchive"); return res;
}
export const config = { matcher: ["/:path*"] };
